cpp_quote("/* Executive Microkernel");
cpp_quote(" * IMemoryManager.idl");
cpp_quote(" *");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "IObject.idl";
import "IRegion.idl";
import "IRegionHolder.idl";

[
	local,
	object,
	uuid(f037af3e-a41f-4813-b2dc-69bf96049bf2),
	pointer_default(unique),
	cheader("Executive/IMemoryManager.h")
]
interface IMemoryManager: IObject
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The IMemoryManager interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");
	
	/* Locate the region which includes the address <ptr> */
	int regionFromPointer([in] void *ptr, [out] IRegion **region);
	
	/* Obtain the default page size, in bytes */
	int pageSize(void);
	
	/* Obtain a region of <count> pages, with the supplied IRegionHolder */
	int obtainRegion([in] size_t count, [in] RegionFlags flags, [in] IRegionHolder *owner, [out] IRegion **region);

	/* Obtain a transient region of <count> pages, with the supplied IRegionHolder */
	int obtainTransientRegion([in] size_t count, [in] RegionFlags flags, [in] IRegionHolder *owner, [out] IRegion **region);
}
