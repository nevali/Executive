cpp_quote("/* Executive Microkernel");
cpp_quote(" * IPlatformDiagnostics.idl");
cpp_quote(" *   Defines the diagnostic interface the PAL provides to the Executive");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "IObject.idl";

[
	object,
	uuid(5915ac8d-93d9-48e6-bbdf-d6ecdd1a8faf),
	cheader("Executive/IPlatformDiagnostics.h")
]
interface IPlatformDiagnostics: IObject
{
	typedef enum
	{
		LOG_EMERG = 99,
		LOG_EMERGENCY = LOG_EMERG,
		LOG_ALERT = 50,
		LOG_CRIT = 40,
		LOG_CRITICAL = LOG_CRIT,
		LOG_ERR = 30,
		LOG_ERROR = LOG_ERR,
		LOG_WARN = 20,
		LOG_WARNING = LOG_WARN,
		LOG_NOTICE = 10,
		LOG_INFO = 0,
		LOG_CONDITION = -5,
		LOG_DEBUG = -10,
		LOG_DEBUG2 = -20,
		LOG_DEBUG3 = -30,
		LOG_DEBUG4 = -40,
		LOG_DEBUG5 = -50,
		LOG_DEBUG6 = -60,
		LOG_DEBUG7 = -70,
		LOG_TRACE = -99
	} LogLevel;

	typedef enum
	{
		PHASE_UNKNOWN = -1,
		/* Power-on Self-Test */
		PHASE_POST = 0,
		/* Firmware environment */
		PHASE_FIRMWARE = 0x1000,
		/* Preboot environment */
		PHASE_PREBOOT = 0x2000,
		/* The kernel is being loaded */
		PHASE_BOOT = 0x2000,
		/* The kernel is starting */
		PHASE_STARTUP =                0x3000,
		PHASE_STARTUP_GLUE =           0x3001,
		PHASE_STARTUP_ENTRY =          0x3010,
		PHASE_STARTUP_EXECINIT =       0x3100,
		PHASE_STARTUP_MM =             0x3200,
		PHASE_STARTUP_ALLOCATOR =      0x3210,
		PHASE_STARTUP_BOOTENV =        0x3300,
		PHASE_STARTUP_DIAG =           0x3400,
		PHASE_STARTUP_ROOT =           0x3500,
		PHASE_STARTUP_SYSTEM =         0x3600,
		PHASE_STARTUP_USERS =          0x3700,
		PHASE_STARTUP_VOLUMES =        0x3800,
		PHASE_STARTUP_LOCAL =          0x3900,
		PHASE_STARTUP_CLUSTER =        0x3a00,
		PHASE_STARTUP_NETWORK =        0x3b00,
		PHASE_STARTUP_TASKER =         0x3c00,
		PHASE_STARTUP_CLASSES =        0x3d00,
		PHASE_STARTUP_EXECTASK =       0x3e00,
		
		/* User-space initialisation is occurring */
		PHASE_USERINIT = 0x4000,
		/* The system is running */
		PHASE_RUNNING = 0x5000,
		/* The system has been suspended */
		PHASE_SUSPENDED = 0x6000
	} PHASE;

	void log(LogLevel level, const char *string);
}
