cpp_quote("/* Executive Microkernel");
cpp_quote(" * ILink.idl");
cpp_quote(" *   Represents a link to another object");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IObject.idl";

[
	object,
	uuid(75d9e760-48ee-4f9a-a01e-d1a38cf2cd96),
	cheader("Executive/ILink.h")
]
interface ILink: IObject
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The ILink interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");

	const int ILink_ID__MIN_ = 0x0090;

	const int ILink_ID_target = ILink_ID__MIN_;
	STATUS target([out, string] char *buf, [in] size_t buflen);

	const int ILink_ID__MAX_ = ILink_ID_target;
}
