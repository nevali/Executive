cpp_quote("/* Executive Microkernel");
cpp_quote(" * IPlatform.idl");
cpp_quote(" *   Defines the Platform interface provided by the PAL to the Executive");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IObject.idl";
import "Executive/IAllocator.idl";
import "Executive/IPlatformDiagnostics.idl";
import "Executive/INamespace.idl";

[
	object,
	uuid(d02b2658-e5c1-4fce-9ea7-ae39996602c6),
	cheader("Executive/IPlatform.h")
]
interface IPlatform: IObject
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The IPlatform interface is currently considered unstable; source and binary compatibility are not assured.");
	cpp_quote("#endif");

	/** Kernel-facing APIs **/

	/* Invoked by the panic to immediately halt the system, displaying the
	 * supplied string
	 */
	void panic([in] const char *string);
	/* Invoked by the scheduler when there are no threads available to switch
	 * to
	 */
	void nap(void);
	/* Invoked by the scheduler on a frequent basis */
	void tick(void);

	/** Notifications **/

	/* The kernel has activated a new allocator */
	void allocatorActivated([in] IAllocator *allocator);
	/* The kernel has activated a root namespace */
	void namespaceActivated([in] INamespace *ns);
	/* The kernel's phase state was has transitioned */
	void phaseTransition(PHASE newPhase);
}
