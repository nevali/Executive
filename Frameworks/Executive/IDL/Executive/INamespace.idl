cpp_quote("/* Executive Microkernel");
cpp_quote(" * INamespace.idl");
cpp_quote(" *");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IContainer.idl";

[
	object,
	uuid(444137ec-a886-480e-9ac9-5f5688ed71f9),
	pointer_default(unique),
	cheader("Executive/INamespace.h")
]
interface INamespace: IContainer
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The INamespace interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");

	/* resolve path to a directory entry */
	const int INamespace_ID_resolveEntry = 5;
	STATUS resolveEntry([in] const char *path, [in] IContainer *scope, [out] IDirectoryEntry **dentry);
	/* resolve path to the container which would be scanned to match the last component */
	const int INamespace_ID_resolveContainer = 6;
	STATUS resolveContainer([in] const char *path, [in] IContainer *scope, [out] IContainer **container, [out] const char **basename);

	/* resolve a path, then attempt to open it */
	const int INamespace_ID_open = 7;
	STATUS open([in] const char *path, [in] IContainer *scope, REFUUID iid, [out, iid_is(iid)] void **container);

	/* create a new object */
	const int INamespace_ID_create = 8;
	STATUS create([in] const char *name, [in] IContainer *scope, REFUUID clsid, REFUUID iid, [out, iid_is(iid)] void **container);

	/* add an existing object at the specified path */
	const int INamespace_ID_add = 9;
	STATUS add([in] const char *name, [in] IContainer *scope, [in] REFUUID clsid, [in] IObject *target);

	/* create a link to another named object */
	const int INamespace_ID_createLink = 10;
	STATUS createLink([in] const char *name, [in] IContainer *scope, [in] const char *target, [in] bool force);

	/* attempt to set the flags on an existing directory entry */
	const int INamespace_ID_setFlags = 11;
	STATUS setFlags([in] const char *name, [in] IContainer *scope, [in] DirectoryEntryFlags flags);
}
