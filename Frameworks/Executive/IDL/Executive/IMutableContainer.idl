cpp_quote("/* Executive Microkernel");
cpp_quote(" * IMutableContainer.idl");
cpp_quote(" *");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IContainer.idl";

[
	object,
	uuid(bf8f706d-24ed-4646-b8d7-954239ec71e9),
	pointer_default(unique),
	cheader("Executive/IMutableContainer.h")
]
interface IMutableContainer: IContainer
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The IMutableContainer interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");

	/* attempt to create a new object of the specified class, requesting if
	 * successful the specified interface and returning it to the caller
	 */
	STATUS create([in, string] const char *name, [in] REFUUID clsid, [in] REFUUID iid, [out, iid_is(iid)] void **out);
	/* add an existing object to the container with the specified name and class */
	STATUS add([in, string] const char *name, [in] REFUUID clsid, [in] IObject *target);
	/* create a symbolic link to another object by name */
	STATUS createLink([in, string] const char *name, [in, string] const char *target, [in] bool force);
}
