cpp_quote("/* Executive Microkernel");
cpp_quote(" * IObject.idl");
cpp_quote(" *   Defines COM's root polymorphic interface interface");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/Types.idl";
import "Executive/UUID.idl";
import "Executive/Errors.idl";

[
	object,
	uuid(00000000-0000-0000-c000-000000000046),
	pointer_default(unique),
	cheader("Executive/IObject.h")
]
interface IObject
{
	typedef int DESPATCHID;

	/* One day these will be autogenerated */
	const int IObject_ID__MIN_ = 0x0000;

	const int IObject_ID_queryInterface = IObject_ID__MIN_;
	STATUS queryInterface([in] REFUUID riid, [out, iid_is(riid)] void **object);

	const int IObject_ID_retain = IObject_ID_queryInterface + 1;
	REFCOUNT retain();

	const int IObject_ID_release = IObject_ID_retain + 1;
	REFCOUNT release();

	const int IObject_ID__MAX_ = IObject_ID_release;
}
