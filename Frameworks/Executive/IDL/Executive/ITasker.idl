cpp_quote("/* Executive Microkernel");
cpp_quote(" * ITasker.idl");
cpp_quote(" *   Defines the Tasker (scheduler) interface");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IObject.idl";
import "Executive/ITask.idl";
import "Executive/IThread.idl";
import "Executive/INamespace.idl";
import "Executive/IAddressSpace.idl";

[
	local, object,
	uuid(ae9562b8-ee29-4641-bd4a-b89c4ab9affc),
	cheader("Executive/ITasker.h")
]
interface ITasker: IObject
{
	/* The IDL compiler won't emit the struct definition unless it's a typedef
	 * for reasons which are unclear
	 */
	typedef struct TaskCreationParameters
	{
		/* this pointer need only remain valid for the duration of the
		 * createTask() call
		 */
		const char *name;
		TaskFlags flags;
		INamespace *namespace;
		IAddressSpace *addressSpace;
		ThreadEntrypoint mainThread_entrypoint;
	} TaskCreationParameters;

	void tick(void);
	void yield(void);
	TASKID createTask([in] const struct TaskCreationParameters *params, [in] REFUUID iid, [out,iid_is(iid)] void **task);
}
