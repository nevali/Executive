cpp_quote("/* Executive Microkernel");
cpp_quote(" * Task.idl");
cpp_quote(" *   Defines a Task");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IObject.idl";
import "Executive/IJob.idl";

[
	object,
	uuid(2b78de24-0c9e-43bc-977d-5d38f4985b86),
	cheader("Executive/ITask.h")
]
interface ITask: IObject
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The ITask interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");

	typedef int32_t TASKID;

	typedef enum
	{
		TF_TYPEMASK = 7,

		TF_DEFAULT = 0,
		/* Task is internal to the Executive itself (typically only task 0) */
		TF_EXECUTIVE = 1,
		/* reserved = 2..7 */

		/* Task status flags (exclusive) */
		TF_STATUSMASK = (31 << 3),
		TF_NEW     = 0,
		TF_READY   = (1 << 3),
		TF_RUNNING = (2 << 3),
		TF_SUSPENDED = (3 << 3),
		TF_COMPLETED = (4 << 3),
		TF_TERMINATED = (5 << 3)

		/* Condition flags */
	} TaskFlags;

	TASKID id(void);
	TaskFlags flags(void);
	STATUS ns([in] REFUUID iid, [out, iid_is(iid)] void **out);
	STATUS job([in] REFUUID iid, [out, iid_is(iid)] void **out);
	STATUS addressSpace([in] REFUUID iid, [out, iid_is(iid)] void **out);
}
