cpp_quote("/* Executive Microkernel");
cpp_quote(" * IExecutable.idl");
cpp_quote(" *");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IObject.idl";
import "Executive/ITask.idl";

[
	object,
	uuid(5f3ad3fa-3b06-4a03-9bef-3fab9763ce83),
	cheader("Executive/IExecutable.h")
]
interface IExecutable: IObject
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The IExecutable interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");

	/* IExecutable is provided by objects which can be launched as tasks. In
	 * the case of executable files on disk, this is via filters installed by
	 * Personalities which are able to load the object code and provide the
	 * Tasker with what it needs to create and lauch a new task.
	 */
	
	/* Spawn this executable as a new task as a child of the current task */
	TASKID spawn(const char **args, REFUUID iid, void **out);
}
