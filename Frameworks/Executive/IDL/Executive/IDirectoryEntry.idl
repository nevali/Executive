cpp_quote("/* Executive Microkernel");
cpp_quote(" * IDirectoryEntry.idl");
cpp_quote(" *   Represents an entry in the Object Directory");
cpp_quote(" */");
cpp_quote("");
cpp_quote("/* Copyright 2015-2022 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "Executive/IObject.idl";

[
	object,
	uuid(4a285022-c781-437c-94ef-44254bd51bd3),
	cheader("Executive/IDirectoryEntry.h")
]
interface IDirectoryEntry: IObject
{
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The IDirectoryEntry interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");

	typedef enum
	{
		DEF_NONE = 0,
		DEF_SYSTEM = (1<<0),
		DEF_CONTAINER = (1<<1),
		DEF_IMMUTABLE = (1<<2),
		DEF_HIDDEN = (1<<3),
		DEF_LINK = (1<<4),
		DEF_VOID = (1<<5),
		DEF_MOUNTPOINT = (1<<6)
	} DirectoryEntryFlags;

	/* Attempt to obtain an interface on the entry's target object */
	STATUS queryTargetInterface([in] REFUUID iid, [out,iid_is(iid)] void **out);

	/* Retrieve the entry's properties */
	[local] const char *name(void);
	void classid([out] UUID *clsid);
	DirectoryEntryFlags flags(void);
	/* timestamps */
	/* size */
	/* owner */
	/* group */
	/* storage reference (device, inode) */

	/* Set properties on the entry */
	STATUS setFlags(DirectoryEntryFlags flags);
}
